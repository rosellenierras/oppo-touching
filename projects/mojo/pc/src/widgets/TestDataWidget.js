
Ext.define('Vitria.TestDataWidget', {
    
    mixins: {observable:'Ext.util.Observable'},

    TOKENS: [
            "Lorem", "Ipsum", "Dolor", "Consetetur", "Elitr",
            "Diam", "Nonumy", "Eirmod", "Tempor", "Voluptua",
            "Labore et dolore",  "Magna aliquyam erat", "Sed diam", "At vero", "Accusam et justo",
            "Dolores et ea rebum", "Stet clita", "Takimata sanctus", "Lorem ipsum", "Consetetur sadipscing"
    ],

    NASDAQ100: [
            "ATVI", "ADBE", "ALTR", "AMZN", "APCC", "AMGN", "APOL", "AAPL", "AMAT", "ATYT", 
            "ADSK", "BEAS", "BBBY", "BIIB", "BMET", "BRCM", "CDNS", "CDWC", "CELG", "CHRW", 
            "CHKP", "CKFR", "CHIR", "CTAS", "CSCO", "CTXS", "CTSH", "CMCSA", "CMVT", "COST", 
            "DELL", "XRAY", "DISCA", "EBAY", "DISH", "ERTS", "EXPE", "EXPD", "ESRX", "FAST", 
            "FISV", "FLEX", "GRMN", "GENZ", "GILD", "GOOG", "IACI", "INTC", "INTU", "JDSU", 
            "JNPR", "KLAC", "LRCX", "LAMR", "LBTYA", "LNCR", "LLTC", "ERICY", "MRVL", "MXIM", 
            "MCIP", "MEDI", "MERQ", "MCHP", "MSFT", "MNST", "NTAP", "NIHD", "NVLS", "NTLI", 
            "NVDA", "ORCL", "PCAR", "PDCO", "PTEN", "PAYX", "PETM", "PIXR", "QCOM", "RHAT", 
            "RIMM", "ROST", "SNDK", "SHLD", "SEPR", "SEPR", "SIRI", "SPLS", "SBUX", "SUNW", 
            "SYMC", "TLAB", "TEVA", "URBN", "VRSN", "WFMI", "WYNN", "XLNX", "XMSR", "YHOO", 
    ],

    DOW30: [
            "MMM", "AA", "AIG", "AXP", "T", "BAC", "BA", "CAT", "CVX", "C", 
            "KO", "DIS", "DD", "XOM", "GE", "GM", "HPQ", "HD", "IBM", "INTC", 
            "JNJ", "JPM", "MCD", "MRK", "MSFT", "PFE", "PG", "UTX", "VZ", "WMT", 
    ],
    
    // the result generated by this widget as input of other widgets
    // it will be populated by propertyChanged event
    result: null,
    
    operation: 'GENERATED-RECORD', // can be CUSTOM-RECORD, GENERATED-RECORD, GENERATED-XML, CUSTOM-XML
    
    // GENERATED-RECORD
    numRecord: 10,  // 1 - 10000
    numGroup: 1,    // 0 - 20
    numLabelField:1,// 0 - 20
    numLabelToken: 10, // 0 - 20
    numValueField: 1,  // 0 - 20
    minValue: 0,
    maxValue: 100,
    
    // GENERATED-XML
    tokenList: 'LoremIpsum', // can be 'Nasdaq100', 'DOW30'
    
    // CUSTOM-RECORD
    index: 0,
    
    // CUSTOM-XML
    data: null, // together with index
    
    constructor:function(cfg) {
        cfg = cfg || {};
        var me = this;
        //me.callParent(arguments);
        var config = {};
        for(var key in cfg) {
            if(typeof(key) == 'undefined') continue;
            if(key.indexOf('$') == 0) {
                var newKey = key.substring(1, key.length);
                config[newKey] = cfg[key];
            } else {
                config[key] = cfg[key];
            }
        }
        Ext.apply(me, config);
        me.addEvents(
            /**
             * When some property is changed, notify outside to trigger ECA
             */
            'propertyChanged'
        );
    },
    
    refresh:function() {
        var me = this;
        me.evaluate();
        me.fireEvent('propertyChanged', me, {name: 'result', value: me.result});
    },
    
    parseInt:function(keys) {
        var i = 0, length = keys.length, me = this;
        for(; i<length; i++) {
            var key = keys[i];
            if(typeof(me[key]) == 'string') {
                me[key] = parseInt(me[key]);
            }
        }
    },
    
    evaluate:function() {
        var me =  this;
        switch(me.operation) {
            case 'GENERATED-RECORD':
                me.parseInt(['numRecord', 'numGroup', 'numLabelField',
                             'numLabelToken', 'numValueField', 'minValue', 'maxValue']);
                me.result = me.generateRecords(me.numRecord, me.numGroup,
                me.numLabelField, me.numLabelToken,
                me.numValueField, me.minValue, me.maxValue);
                break;
            case 'GENERATED-XML':
                me.result = me.getGeneratedXML();
                break;
            case 'CUSTOM-RECORD':
                break;
        }
    },
    
    generateRecords:function(numRecord, numGroup,
            numLabel, labelVariations,
            numValue, minValue, maxValue) {
        var temp = [], i, j, k = 0, record;
        var me = this;    
        if (numGroup > 0) {
            for (i=0; i<numRecord; i++) {
                record = {};
                for (j=0; j<numGroup; j++) {
                    record["group"+j] = "G_" + j + "_" + i;
                }
                me.addLabelFields(record, numLabel, labelVariations);
                me.addValueFields(record, numValue, minValue, maxValue);
                temp[k++] = record;
            }
        } else {
            // no groups defined
            // check for special case where there is only one field...
            // just generate array of simple types
            if (numLabel == 0 && numValue == 1) {
                for (i=0; i<numRecord; i++) {
                    record = {};
                    me.addValueFields(record, numValue, minValue, maxValue);
                    temp[k++] = record["value0"];
                }
            } else if (numLabel == 1 && numValue == 0) {
                for (i=0; i<numRecord; i++) {
                    record = {};
                    me.addLabelFields(record, numLabel, labelVariations);
                    temp[k++] = record["label0"];
                }
            } else {
                for (i=0; i<numRecord; i++) {
                    record = {};
                    me.addLabelFields(record, numLabel, labelVariations);
                    me.addValueFields(record, numValue, minValue, maxValue);
                    temp[k++] = record;
                }
            }
        }
        return temp;
    },
    
    /**
     *  Math.floor(Math.max((Math.random() * 100), floor)),
     *@param {Object} record
     *@param {Number} numLabel
     *@param {Number} labelVariations
     */
    addLabelFields:function(record, numLabel, labelVariations) {
        for (var i=0; i<numLabel; i++) {
            var tok = Math.floor(Math.random() * labelVariations) ;
            record["label"+i] = me.getToken(tok);
        }
    },
    
    addValueFields:function(record, numValue, minValue, maxValue) {
        for (var i=0; i<numValue; i++) {
            var val = minValue + (Math.random() * (maxValue-minValue));
            record["value"+i] = Math.ceil(val);
        }
    },
    
    getToken:function(tok) {
        var me = this;
        switch (me.tokenList) {
            case "LoremIpsum":
                return me.TOKENS[tok % me.TOKENS.length];
            case "Nasdaq100":
                return me.NASDAQ100[tok % me.NASDAQ100.length];
            case "DOW30":
                return me.DOW30[tok % me.DOW30.length];
            default:
                return me.TOKENS[tok % me.TOKENS.length];
    }
    }
    
});